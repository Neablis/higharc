{"version":3,"sources":["../../src/resolvers/user.ts"],"names":["UserResolver","User","description","Smoothie","String","user","ctx","email","findOne","relations","smoothies","signup","data","existingUser","where","Error","firstName","lastName","password","isAdmin","errors","length","save","login","loggedIn"],"mappings":";;;;;;;;;;;AAAA;;AAUA;;AACA;;AACA;;AAEA;;AACA;;;;IAGaA,Y,WADZ,2BAASC,aAAT,C,UAEE,8B,UACA,wBAAM,MAAMA,aAAZ,EAAkB;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAlB,C;SAEE,uB;gLAMF,gCAAc,MAAM,CAACC,iBAAD,CAApB,C;SACgB,wB;gLAIhB,2BAAS,MAAMC,MAAf,EAAuB;AAAEF,EAAAA,WAAW,EAAE;AAAf,CAAvB,C;SAEE,sBAAI,MAAJ,C;2LA2BF,wBAAM,MAAME,MAAZ,EAAoB;AAAEF,EAAAA,WAAW,EAAE;AAAf,CAApB,C;SAEE,sBAAI,MAAJ,C;yMA/CL,MACaF,YADb,CAC0B;AACxB,QAEMK,IAFN,CAGSC,GAHT,EAI6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAlB;AACA,WAAOL,cAAKO,OAAL,CAAa;AAAED,MAAAA;AAAF,KAAb,EAAwB;AAAEE,MAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,uBAAd;AAAb,KAAxB,CAAP;AACD;;AAED,QACMC,SADN,CACwBL,IADxB,EACyD;AACvD,WAAOA,IAAI,CAACK,SAAL,IAAkB,EAAzB;AACD;;AAED,QACMC,MADN,CAEeC,IAFf,EAG+B;AAC7B,UAAMC,YAAY,GAAG,MAAMZ,cAAKO,OAAL,CAAa;AACtCM,MAAAA,KAAK,EAAE;AACLP,QAAAA,KAAK,EAAEK,IAAI,CAACL;AADP;AAD+B,KAAb,CAA3B;AAMA,QAAIM,YAAJ,EAAkB,MAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AAElB,UAAMV,IAAI,GAAG,IAAIJ,aAAJ,EAAb;AACAI,IAAAA,IAAI,CAACE,KAAL,GAAaK,IAAI,CAACL,KAAlB;AACAF,IAAAA,IAAI,CAACW,SAAL,GAAiBJ,IAAI,CAACI,SAAtB;AACAX,IAAAA,IAAI,CAACY,QAAL,GAAgBL,IAAI,CAACK,QAArB;AACAZ,IAAAA,IAAI,CAACa,QAAL,GAAgBN,IAAI,CAACM,QAArB;AACAb,IAAAA,IAAI,CAACc,OAAL,GAAeP,IAAI,CAACO,OAAL,IAAgB,KAA/B;AAEA,UAAMC,MAAM,GAAG,MAAM,8BAASf,IAAT,CAArB;;AAEA,QAAIe,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIN,KAAJ,CAAU,yBAAV,CAAN;AACD,KAFD,MAEO;AACL,YAAMV,IAAI,CAACiB,IAAL,EAAN;AACA,aAAO,wBAAYjB,IAAZ,CAAP;AACD;AACF;;AAED,QACMkB,KADN,CAEeX,IAFf,EAG0B;AACxB,UAAMC,YAAY,GAAG,MAAMZ,cAAKO,OAAL,CAAa;AACtCM,MAAAA,KAAK,EAAE;AACLP,QAAAA,KAAK,EAAEK,IAAI,CAACL;AADP;AAD+B,KAAb,CAA3B;AAMA,QAAIiB,QAAQ,GAAG,MAAM,uBAAWZ,IAAI,CAACM,QAAhB,EAA0BL,YAA1B,CAArB;;AAEA,QAAIW,QAAQ,IAAIX,YAAhB,EAA8B;AAC5B,aAAO,wBAAYA,YAAZ,CAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AACD;AACF;;AA7DuB,C","sourcesContent":["import {\n  Resolver,\n  Query,\n  Arg,\n  Mutation,\n  Ctx,\n  Authorized,\n  FieldResolver,\n  Root,\n} from 'type-graphql';\nimport { Context, LoginInput, SignupInput } from '../types';\nimport { createToken, isPassword } from '../utils'\nimport { validate } from \"class-validator\";\n\nimport User from '../entity/User';\nimport Smoothie from '../entity/Smoothie';\n\n@Resolver(User)\nexport class UserResolver {\n  @Authorized()\n  @Query(() => User, { description: \"Get the user for the passed authentication token\" })\n  async user(\n    @Ctx() ctx: Context\n  ): Promise<User | undefined> { \n    const { email } = ctx;\n    return User.findOne({ email }, { relations: ['smoothies', 'smoothies.ingredients']});\n  }\n\n  @FieldResolver(() => [Smoothie])\n  async smoothies(@Root() user: User): Promise<Smoothie[]> {\n    return user.smoothies || []\n  }\n\n  @Mutation(() => String, { description: \"Create a new user and returns a valid login token\" })\n  async signup(\n    @Arg('data') data: SignupInput,\n  ): Promise<string | undefined> {\n    const existingUser = await User.findOne({ \n      where: {  \n        email: data.email\n      }\n    });\n\n    if (existingUser) throw new Error('Email is already taken')\n\n    const user = new User();\n    user.email = data.email;\n    user.firstName = data.firstName;\n    user.lastName = data.lastName;\n    user.password = data.password;\n    user.isAdmin = data.isAdmin || false;\n\n    const errors = await validate(user);\n\n    if (errors.length > 0) {\n      throw new Error('Error creating new user'); \n    } else {\n      await user.save();\n      return createToken(user)\n    }\n  }\n\n  @Query(() => String, { description: \"Get a valid auth token if user/password is correct\" })\n  async login(\n    @Arg('data') data: LoginInput,\n  ): Promise<string | void> {\n    const existingUser = await User.findOne({ \n      where: {  \n        email: data.email,\n      }\n    });\n\n    let loggedIn = await isPassword(data.password, existingUser)\n\n    if (loggedIn && existingUser) {\n      return createToken(existingUser)\n    } else {\n      throw new Error('Incorrect Login')\n    }\n  }\n}\n"],"file":"user.js"}