{"version":3,"sources":["../../src/resolvers/user.ts"],"names":["UserResolver","User","String","user","ctx","findOne","email","signup","data","existingUser","where","firstName","lastName","password","isAdmin","errors","length","Error","save","login","loggedIn","console","log"],"mappings":";;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AAGA;;;;IAGaA,Y,WADZ,2BAASC,aAAT,C,UAEE,wBAAM,MAAMA,aAAZ,C;SAEE,uB;gLAKF,2BAAS,MAAMA,aAAf,C;SAEE,sBAAI,MAAJ,C;yLA0BF,wBAAM,MAAMC,MAAZ,C;SAEE,sBAAI,MAAJ,C;yMAvCL,MACaF,YADb,CAC0B;AAExBG,EAAAA,IADA,CAESC,GAFT,EAG6B;AACvB,WAAOH,cAAKI,OAAL,CAAa;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAb,CAAP;AACL;;AAED,QACMC,MADN,CAEeC,IAFf,EAG6B;AAC3B,UAAMC,YAAY,GAAG,MAAMR,cAAKI,OAAL,CAAa;AACtCK,MAAAA,KAAK,EAAE;AACLJ,QAAAA,KAAK,EAAEE,IAAI,CAACF;AADP;AAD+B,KAAb,CAA3B;AAMA,QAAIG,YAAJ,EAAkB,OAAOA,YAAP;AAElB,UAAMN,IAAI,GAAG,IAAIF,aAAJ,EAAb;AACAE,IAAAA,IAAI,CAACG,KAAL,GAAaE,IAAI,CAACF,KAAlB;AACAH,IAAAA,IAAI,CAACQ,SAAL,GAAiBH,IAAI,CAACG,SAAtB;AACAR,IAAAA,IAAI,CAACS,QAAL,GAAgBJ,IAAI,CAACI,QAArB;AACAT,IAAAA,IAAI,CAACU,QAAL,GAAgBL,IAAI,CAACK,QAArB;AACAV,IAAAA,IAAI,CAACW,OAAL,GAAeN,IAAI,CAACM,OAAL,IAAgB,KAA/B;AAEA,UAAMC,MAAM,GAAG,MAAM,8BAASZ,IAAT,CAArB;;AAEA,QAAIY,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD,KAFD,MAEO;AACL,aAAOd,IAAI,CAACe,IAAL,EAAP;AACD;AACF;;AAED,QACMC,KADN,CAEeX,IAFf,EAG0B;AACxB,UAAMC,YAAY,GAAG,MAAMR,cAAKI,OAAL,CAAa;AACtCK,MAAAA,KAAK,EAAE;AACLJ,QAAAA,KAAK,EAAEE,IAAI,CAACF;AADP;AAD+B,KAAb,CAA3B;AAMA,QAAIc,QAAQ,GAAG,MAAM,uBAAWZ,IAAI,CAACK,QAAhB,EAA0BJ,YAA1B,CAArB;AAEAY,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,MAAAA;AAAD,KAAZ;;AAEA,QAAIA,QAAQ,IAAIX,YAAhB,EAA8B;AAC5B,aAAO,wBAAYA,YAAZ,CAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIQ,KAAJ,CAAU,iBAAV,CAAN;AACD;AACF;;AAvDuB,C","sourcesContent":["import {\n  Resolver,\n  Query,\n  Arg,\n  Mutation,\n  Ctx,\n} from 'type-graphql';\nimport { Context, LoginInput, SignupInput } from '../types';\nimport { createToken, isPassword } from '../utils'\nimport { validate } from \"class-validator\";\nimport * as bcrypt from 'bcryptjs';\n\nimport User from '../entity/User';\n\n@Resolver(User)\nexport class UserResolver {\n  @Query(() => User)\n  user(\n    @Ctx() ctx: Context\n  ): Promise<User | undefined> { \n        return User.findOne({email: 'mitchell@demarcosoftware.com'})\n  }\n\n  @Mutation(() => User)\n  async signup(\n    @Arg('data') data: SignupInput,\n  ): Promise<User | undefined> {\n    const existingUser = await User.findOne({ \n      where: {  \n        email: data.email\n      }\n    });\n\n    if (existingUser) return existingUser;\n\n    const user = new User();\n    user.email = data.email;\n    user.firstName = data.firstName;\n    user.lastName = data.lastName;\n    user.password = data.password;\n    user.isAdmin = data.isAdmin || false;\n\n    const errors = await validate(user);\n\n    if (errors.length > 0) {\n      throw new Error('Error creating new user'); \n    } else {\n      return user.save();\n    }\n  }\n\n  @Query(() => String)\n  async login(\n    @Arg('data') data: LoginInput,\n  ): Promise<string | void> {\n    const existingUser = await User.findOne({ \n      where: {  \n        email: data.email,\n      }\n    });\n\n    let loggedIn = await isPassword(data.password, existingUser)\n\n    console.log({loggedIn})\n\n    if (loggedIn && existingUser) {\n      return createToken(existingUser)\n    } else {\n      throw new Error('Incorrect Login')\n    }\n  }\n}\n"],"file":"user.js"}