{"version":3,"sources":["../../src/resolvers/user.ts"],"names":["UserResolver","User","user","findOne","email"],"mappings":";;;;;;;;;;;AAAA;;AAWA;;;;IAKaA,Y,WADZ,2BAASC,aAAT,C,UAEE,wBAAM,MAAMA,aAAZ,C;SACK,wB;+LAHR,MACaD,YADb,CAC0B;AAExBE,EAAAA,IADA,CACaA,IADb,EACoD;AAC9C,WAAOD,cAAKE,OAAL,CAAa;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAb,CAAP;AACL;;AAJuB,C","sourcesContent":["import {\n  Resolver,\n  Query,\n  Arg,\n  Mutation,\n  Ctx,\n  FieldResolver,\n  Root,\n} from 'type-graphql';\nimport { UserInput, Context } from '../types';\n\nimport User from '../entity/User';\nimport { IsNull, Not } from 'typeorm';\nimport { generateFilterType } from 'type-graphql-filter';\n\n@Resolver(User)\nexport class UserResolver {\n  @Query(() => User)\n  user(@Root() user: User): Promise<User | undefined> { \n        return User.findOne({email: 'mitchell@demarcosoftware.com'})\n  }\n}\n"],"file":"user.js"}