{"version":3,"sources":["../../src/resolvers/ingredient.ts"],"names":["IngredientResolver","Smoothie","Ingredient","nullable","description","Boolean","ingredient","id","ctx","findOne","where","updateIngredient","updates","Error","name","quantity","unit","errors","length","save","deleteIngredient","delete"],"mappings":";;;;;;;;;;;AAAA;;AAQE;;AAEA;;AAEA;;AACA;;AACA;;;;IAIaA,kB,WADZ,2BAASC,iBAAT,C,UAEE,8B,UACA,wBAAM,MAAMC,mBAAZ,EAAwB;AAAEC,EAAAA,QAAQ,EAAE,IAAZ;AAAkBC,EAAAA,WAAW,EAAE;AAA/B,CAAxB,C;SAEE,sBAAI,IAAJ,EAAU;AAAED,IAAAA,QAAQ,EAAE;AAAZ,GAAV,C;;SACA,uB;wLASF,8B,UACA,2BAAS,MAAMD,mBAAf,EAA2B;AAAEE,EAAAA,WAAW,EAAE;AAAf,CAA3B,C;SAEE,sBAAI,IAAJ,EAAU;AAAED,IAAAA,QAAQ,EAAE;AAAZ,GAAV,C;;SACA,sBAAI,SAAJ,EAAc;AAAEA,IAAAA,QAAQ,EAAE;AAAZ,GAAd,C;;SACA,uB;8RA0BF,8B,WACA,2BAAS,MAAME,OAAf,EAAwB;AAAED,EAAAA,WAAW,EAAE;AAAf,CAAxB,C;SAEE,sBAAI,IAAJ,EAAU;AAAED,IAAAA,QAAQ,EAAE;AAAZ,GAAV,C;;SACA,uB;2MAlDL,MACaH,kBADb,CACgC;AAC9B,QAEMM,UAFN,CAGkCC,EAHlC,EAISC,GAJT,EAKmC;AACjC,WAAON,oBAAWO,OAAX,CAAmB;AACxBC,MAAAA,KAAK,EAAE;AACHH,QAAAA;AADG;AADiB,KAAnB,CAAP;AAKD;;AAED,QAEMI,gBAFN,CAGkCJ,EAHlC,EAIsCK,OAJtC,EAKSJ,GALT,EAMuB;AAEnB,UAAMF,UAAU,GAAG,MAAMJ,oBAAWO,OAAX,CAAmB;AACxCC,MAAAA,KAAK,EAAE;AACHH,QAAAA;AADG;AADiC,KAAnB,CAAzB;AAMA,QAAI,CAACD,UAAL,EAAiB,MAAM,IAAIO,KAAJ,CAAU,2BAAV,CAAN;AAEjBP,IAAAA,UAAU,CAACQ,IAAX,GAAkBF,OAAO,CAACE,IAAR,IAAgBR,UAAU,CAACQ,IAA7C;AACAR,IAAAA,UAAU,CAACS,QAAX,GAAsBH,OAAO,CAACG,QAAR,IAAoBT,UAAU,CAACS,QAArD;AACAT,IAAAA,UAAU,CAACU,IAAX,GAAkBJ,OAAO,CAACI,IAAR,IAAgBV,UAAU,CAACU,IAA7C;AAEA,UAAMC,MAAM,GAAG,MAAM,8BAASX,UAAT,CAArB;;AAEA,QAAIW,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIL,KAAJ,CAAU,2BAAV,CAAN;AACD,KAFD,MAEO;AACH,YAAMP,UAAU,CAACa,IAAX,EAAN;AACH;;AAED,WAAOb,UAAP;AACH;;AAED,QAEMc,gBAFN,CAGkCb,EAHlC,EAISC,GAJT,EAKoB;AAEhB,UAAMN,oBAAWmB,MAAX,CAAkB;AACpBd,MAAAA;AADoB,KAAlB,CAAN;AAIA,WAAO,IAAP;AACH;;AAzD6B,C","sourcesContent":["import {\n    Resolver,\n    Query,\n    Arg,\n    Mutation,\n    Ctx,\n    Authorized,\n  } from 'type-graphql';\n  import { validate } from \"class-validator\";\n  \n  import { Context } from '../types';\n  \n  import Smoothie from '../entity/Smoothie';\n  import Ingredient from '../entity/Ingredient';\n  import { IngredientUpdateInput } from '../types/smoothie';\n  \n    \n  @Resolver(Smoothie)\n  export class IngredientResolver {\n    @Authorized()\n    @Query(() => Ingredient, { nullable: true, description: \"Get the ingredient by ID\" })\n    async ingredient(\n      @Arg(\"id\", { nullable: false }) id: string,\n      @Ctx() ctx: Context\n    ): Promise<Ingredient | undefined> {\n      return Ingredient.findOne({\n        where: {\n            id\n        }\n      });\n    }\n  \n    @Authorized()\n    @Mutation(() => Ingredient, { description: \"Update the ingredient by its ID\" })\n    async updateIngredient(\n      @Arg(\"id\", { nullable: false }) id: string,\n      @Arg(\"updates\",{ nullable: false }) updates: IngredientUpdateInput,\n      @Ctx() ctx: Context\n    ): Promise<Ingredient> {\n  \n        const ingredient = await Ingredient.findOne({\n            where: {\n                id\n            }\n        });\n\n        if (!ingredient) throw new Error('Could not find ingredient')\n  \n        ingredient.name = updates.name || ingredient.name;\n        ingredient.quantity = updates.quantity || ingredient.quantity;\n        ingredient.unit = updates.unit || ingredient.unit;\n\n        const errors = await validate(ingredient);\n\n        if (errors.length > 0) {\n          throw new Error('Error updating ingredient'); \n        } else {\n            await ingredient.save();\n        }\n\n        return ingredient;\n    };\n\n    @Authorized()\n    @Mutation(() => Boolean, { description: \"Delete the ingredient\" })\n    async deleteIngredient(\n      @Arg(\"id\", { nullable: false }) id: string,\n      @Ctx() ctx: Context\n    ): Promise<Boolean> {\n  \n        await Ingredient.delete({\n            id\n        });\n\n        return true;\n    };\n  }\n    "],"file":"ingredient.js"}