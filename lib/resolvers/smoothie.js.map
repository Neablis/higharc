{"version":3,"sources":["../../src/resolvers/smoothie.ts"],"names":["SmoothieResolver","Smoothie","nullable","smoothie","id","addRecipe","smoothieData","ctx","user","User","findOne","email","Error","name","errors","length","save","ingredientsData","ingredients","x","ingredientData","ingredient","Ingredient","quantity"],"mappings":";;;;;;;;;;;AAAA;;AAQA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;IAIaA,gB,WADZ,2BAASC,iBAAT,C,UAEE,wBAAM,MAAMA,iBAAZ,C;SAEE,sBAAI,IAAJ,EAAU;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV,C;uHAKF,8B,UACA,2BAAS,MAAMD,iBAAf,C;SAEE,sBAAI,MAAJ,C;;SACA,uB;sRAbL,MACaD,gBADb,CAC8B;AAC5B,QACMG,QADN,CAEkCC,EAFlC,EAGiC;AAC/B;AACD;;AAED,QAEMC,SAFN,CAGeC,YAHf,EAISC,GAJT,EAKqB;AACnB,UAAMC,IAAI,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAACC,MAAAA,KAAK,EAAEJ,GAAG,CAACI;AAAZ,KAAb,CAAnB;AAEA,QAAI,CAACH,IAAL,EAAW,MAAM,IAAII,KAAJ,CAAU,mBAAV,CAAN;AAGX,UAAMT,QAAQ,GAAG,IAAIF,iBAAJ,EAAjB;AAEAE,IAAAA,QAAQ,CAACU,IAAT,GAAgBP,YAAY,CAACO,IAA7B;AACAV,IAAAA,QAAQ,CAACK,IAAT,GAAgBA,IAAhB;AAEA,UAAMM,MAAM,GAAG,MAAM,8BAASN,IAAT,CAArB;;AAEA,QAAIM,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIH,KAAJ,CAAU,yBAAV,CAAN;AACD,KAFD,MAEO;AAEL,YAAMT,QAAQ,CAACa,IAAT,EAAN;AAEA,UAAIC,eAAe,GAAGX,YAAY,CAACY,WAAb,IAA4B,EAAlD;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,eAAe,CAACF,MAApC,EAA4CI,CAAC,EAA7C,EAAkD;AAChD,cAAMC,cAAc,GAAGH,eAAe,CAACE,CAAD,CAAtC;AAEA,cAAME,UAAU,GAAG,IAAIC,mBAAJ,EAAnB;AACAD,QAAAA,UAAU,CAACR,IAAX,GAAkBO,cAAc,CAACP,IAAjC;AACAQ,QAAAA,UAAU,CAACE,QAAX,GAAsBH,cAAc,CAACG,QAArC;AACAF,QAAAA,UAAU,CAAClB,QAAX,GAAsBA,QAAtB;AAEA,cAAMW,MAAM,GAAG,MAAM,8BAASO,UAAT,CAArB;AAEAA,QAAAA,UAAU,CAACL,IAAX;AACD;;AAED,aAAOb,QAAP;AACD;AACF;;AAjD2B,C","sourcesContent":["import {\n  Resolver,\n  Query,\n  Arg,\n  Mutation,\n  Ctx,\n  Authorized,\n} from 'type-graphql';\nimport { validate } from \"class-validator\";\n\nimport { Context } from '../types';\n\nimport Smoothie from '../entity/Smoothie';\nimport Ingredient from '../entity/Ingredient';\nimport { SmoothieInput } from '../types/smoothie';\nimport User from '../entity/User';\n\n  \n@Resolver(Smoothie)\nexport class SmoothieResolver {\n  @Query(() => Smoothie)\n  async smoothie(\n    @Arg(\"id\", { nullable: false }) id: string,\n  ): Promise<Smoothie | undefined> {\n    return;\n  }\n\n  @Authorized()\n  @Mutation(() => Smoothie)\n  async addRecipe(\n    @Arg(\"data\") smoothieData: SmoothieInput, \n    @Ctx() ctx: Context\n  ): Promise<Smoothie> {\n    const user = await User.findOne({email: ctx.email});\n\n    if (!user) throw new Error('User doesnt exist')\n    \n\n    const smoothie = new Smoothie();\n\n    smoothie.name = smoothieData.name;\n    smoothie.user = user;\n\n    const errors = await validate(user);\n\n    if (errors.length > 0) {\n      throw new Error('Error creating new user'); \n    } else {\n      \n      await smoothie.save();\n\n      let ingredientsData = smoothieData.ingredients || []\n\n      for (let x = 0; x < ingredientsData.length; x ++) {\n        const ingredientData = ingredientsData[x];\n  \n        const ingredient = new Ingredient();\n        ingredient.name = ingredientData.name;\n        ingredient.quantity = ingredientData.quantity;\n        ingredient.smoothie = smoothie;\n\n        const errors = await validate(ingredient);\n\n        ingredient.save();\n      }\n\n      return smoothie;\n    }\n  }\n}\n  "],"file":"smoothie.js"}