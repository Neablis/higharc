{"version":3,"sources":["../../src/resolvers/smoothie.ts"],"names":["SmoothieResolver","Smoothie","nullable","description","Boolean","Ingredient","smoothie","name","ctx","findOne","where","user","userId","relations","smoothies","find","deleteRecipe","User","email","Error","delete","modifyRecipe","recipeName","save","addRecipe","smoothieData","errors","length","connection","response","manager","ingredientsData","ingredients","smoothieIngredients","x","ingredientData","ingredient","quantity","unit","push"],"mappings":"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","sourcesContent":["import {\n  Resolver,\n  Query,\n  Arg,\n  Mutation,\n  Ctx,\n  Authorized,\n  FieldResolver,\n  Root,\n} from 'type-graphql';\nimport { validate } from \"class-validator\";\n\nimport { Context } from '../types';\n\nimport Smoothie from '../entity/Smoothie';\nimport Ingredient from '../entity/Ingredient';\nimport { SmoothieInput } from '../types/smoothie';\nimport User from '../entity/User';\nimport { getConnection } from 'typeorm';\n  \n@Resolver(Smoothie)\nexport class SmoothieResolver {\n  @Authorized()\n  @Query(() => Smoothie, { nullable: true, description: \"Get a smoothie you created by its name\" })\n  async smoothie(\n    @Arg(\"name\", { nullable: false, description: \"Name of one of your smoothies you want to find\" }) name: string,\n    @Ctx() ctx: Context\n  ): Promise<Smoothie | undefined> {\n    return Smoothie.findOne({\n      where: {\n        user: ctx.userId,\n        name\n      },\n      relations: ['ingredients']\n    });\n  }\n\n  @Authorized()\n  @Query(() => [Smoothie], { nullable: true, description: \"Get all smoothies you made\" })\n  async smoothies(\n    @Ctx() ctx: Context\n  ): Promise<Smoothie[] | undefined> {\n    return Smoothie.find({\n      where: {\n        user: ctx.userId\n      },\n      relations: ['ingredients']\n    });\n  }\n\n  @Authorized()\n  @Mutation(() => Boolean, { description: \"Delete a smoothie you created by its name\" })\n  async deleteRecipe(\n    @Arg(\"name\", { nullable: false, description: \"Name of the smoothie you want to delete\" }) name: string,\n    @Ctx() ctx: Context\n  ): Promise<boolean> {\n    const user = await User.findOne({email: ctx.email});\n\n    if (!user) throw new Error('User doesnt exist')\n\n    await Smoothie.delete({\n      name,\n      user\n    })\n\n    return true;\n  }\n\n  @Authorized()\n  @Mutation(() => Smoothie, { description: \"Update the name of one of your smoothies\" })\n  async modifyRecipe(\n    @Arg(\"recipeName\", { nullable: false, description: \"Name of the recipe you want to update\" }) recipeName: string,\n    @Arg(\"name\", { nullable: false, description: \"New name of the recipe\" }) name: string,\n    @Ctx() ctx: Context\n  ): Promise<Smoothie> {\n    const user = await User.findOne({email: ctx.email});\n\n    if (!user) throw new Error('User doesnt exist')\n\n    const smoothie = await Smoothie.findOne({\n      name: recipeName,\n      user\n    }, {\n      relations: ['ingredients']\n    })\n\n    if (!smoothie) {\n      throw new Error('Recipe doesnt exist')\n    }\n\n    smoothie.name = name;\n    smoothie.save();\n\n    return smoothie;\n  }\n\n  @Authorized()\n  @Mutation(() => Smoothie, { description: \"Create a new smoothie\" })\n  async addRecipe(\n    @Arg(\"data\", {description: \"Input data for the new recipe you are creating\"}) smoothieData: SmoothieInput, \n    @Ctx() ctx: Context\n  ): Promise<Smoothie> {\n    const user = await User.findOne({email: ctx.email});\n\n    if (!user) throw new Error('User doesnt exist')\n\n    const smoothie = new Smoothie();\n\n    smoothie.name = smoothieData.name;\n    smoothie.user = user;\n\n    const errors = await validate(user);\n\n    if (errors.length > 0) {\n      throw new Error('Error creating new user'); \n    } else {\n      const connection = getConnection();\n      const response = await connection.manager.save(Smoothie, smoothie)\n      const ingredientsData = smoothieData.ingredients || []\n      const smoothieIngredients:Ingredient[] = []\n\n      for (let x = 0; x < ingredientsData.length; x ++) {\n        const ingredientData = ingredientsData[x];\n  \n        const ingredient = new Ingredient();\n        ingredient.name = ingredientData.name;\n        ingredient.quantity = ingredientData.quantity;\n        ingredient.unit = ingredientData.unit\n        ingredient.smoothie = response;\n  \n        smoothieIngredients.push(await connection.manager.save(Ingredient, ingredient))\n      }\n\n      smoothie.ingredients = smoothieIngredients;\n\n      return smoothie;\n    }\n  }\n\n  @FieldResolver(() => [Ingredient], {nullable: true})\n  async ingredients(@Root() smoothie: Smoothie): Promise<Ingredient[]> {\n    return smoothie.ingredients || []\n  }\n}\n  "],"file":"smoothie.js"}