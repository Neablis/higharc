{"version":3,"sources":["../../src/utils/validate.ts"],"names":["validateSmoothieInput","params","name","Error","ingredients","Array","isArray","x","length","ingredient","quantity","unit","IngredientUnit","validateLoginInput","email","password","validateSignupInput","firstName","lastName","isAdmin"],"mappings":";;;;;;;AAAA;;AAGO,MAAMA,qBAAqB,GAAIC,MAAD,IAAgC;AACnE,MAAI,CAACA,MAAM,CAACC,IAAZ,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,MAAIF,MAAM,CAACG,WAAX,EAAwB;AACtB,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,MAAM,CAACG,WAArB,CAAL,EAAwC;AACtC,YAAM,IAAID,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACG,WAAP,CAAmBI,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,UAAIE,UAAU,GAAGR,MAAM,CAACG,WAAP,CAAmBG,CAAnB,CAAjB;;AAEA,UAAI,CAACE,UAAU,CAACP,IAAZ,IAAoB,CAACO,UAAU,CAACC,QAAhC,IAA4C,CAACD,UAAU,CAACE,IAA5D,EAAkE;AAChE,cAAM,IAAIR,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,UAAI,CAACS,uBAAeH,UAAU,CAACE,IAA1B,CAAL,EAAsC;AACpC,cAAM,IAAIR,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAEDM,MAAAA,UAAU,CAACE,IAAX,GAAkBC,uBAAeH,UAAU,CAACE,IAA1B,CAAlB;AACD;AACF;;AAED,SAAO;AACLT,IAAAA,IAAI,EAAED,MAAM,CAACC,IADR;AAELE,IAAAA,WAAW,EAAEH,MAAM,CAACG;AAFf,GAAP;AAID,CA7BM;;;;AA+BA,MAAMS,kBAAkB,GAAIZ,MAAD,IAA6B;AAC7D,MAAI,CAACA,MAAM,CAACa,KAAZ,EAAmB;AACjB,UAAM,IAAIX,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,MAAI,CAACF,MAAM,CAACc,QAAZ,EAAsB;AACpB,UAAM,IAAIZ,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,SAAO;AACLW,IAAAA,KAAK,EAAEb,MAAM,CAACa,KADT;AAELC,IAAAA,QAAQ,EAAEd,MAAM,CAACc;AAFZ,GAAP;AAID,CAbM;;;;AAeA,MAAMC,mBAAmB,GAAIf,MAAD,IAA8B;AAC/DY,EAAAA,kBAAkB,CAACZ,MAAD,CAAlB;AAEA,SAAO;AACLgB,IAAAA,SAAS,EAAEhB,MAAM,CAACgB,SADb;AAELC,IAAAA,QAAQ,EAAEjB,MAAM,CAACiB,QAFZ;AAGLC,IAAAA,OAAO,EAAElB,MAAM,CAACkB,OAHX;AAILL,IAAAA,KAAK,EAAEb,MAAM,CAACa,KAJT;AAKLC,IAAAA,QAAQ,EAAEd,MAAM,CAACc;AALZ,GAAP;AAOD,CAVM","sourcesContent":["import { IngredientUnit } from \"../entity\";\nimport { LoginInput, SignupInput, SmoothieInput } from \"../types\"\n\nexport const validateSmoothieInput = (params: any): SmoothieInput => {\n  if (!params.name) {\n    throw new Error('Name of smoothie is missing');\n  }\n\n  if (params.ingredients) {\n    if (!Array.isArray(params.ingredients)) {\n      throw new Error('Ingredients must be an array of ingredients');\n    }\n\n    for (let x = 0; x < params.ingredients.length; x++) {\n      let ingredient = params.ingredients[x];\n\n      if (!ingredient.name || !ingredient.quantity || !ingredient.unit) {\n        throw new Error('Ingredients must have a name, quantity and unit');\n      }\n\n      if (!IngredientUnit[ingredient.unit]) {\n        throw new Error('Not recognized unit type');\n      }\n\n      ingredient.unit = IngredientUnit[ingredient.unit];\n    }\n  }\n\n  return {\n    name: params.name,\n    ingredients: params.ingredients\n  }\n}\n\nexport const validateLoginInput = (params: any): LoginInput => {\n  if (!params.email) {\n    throw new Error('Email is missing')\n  }\n\n  if (!params.password) {\n    throw new Error('Password is missing')\n  }\n\n  return {\n    email: params.email,\n    password: params.password\n  }\n}\n\nexport const validateSignupInput = (params: any): SignupInput => {\n  validateLoginInput(params);\n\n  return {\n    firstName: params.firstName,\n    lastName: params.lastName,\n    isAdmin: params.isAdmin,\n    email: params.email,\n    password: params.password\n  }\n}"],"file":"validate.js"}