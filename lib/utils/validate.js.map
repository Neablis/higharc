{"version":3,"sources":["../../src/utils/validate.ts"],"names":["validateSmoothieInput","params","name","Error","ingredients","Array","isArray","map","validateIngredientInput","quantity","unit","toUpperCase","IngredientUnit","validateLoginInput","email","password","validateSignupInput","firstName","lastName","isAdmin","validateIngredientUpdate"],"mappings":"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","sourcesContent":["import { IngredientUnit } from \"../entity\"\nimport {\n  IngredientInput,\n  IngredientUpdateInput,\n  LoginInput,\n  SignupInput,\n  SmoothieInput\n} from \"../types\"\n\n/* eslint-disable */\nexport const validateSmoothieInput = (params): SmoothieInput => {\n  if (!params.name) {\n    throw new Error('Name of smoothie is missing');\n  }\n\n  if (params.ingredients) {\n    if (!Array.isArray(params.ingredients)) {\n      throw new Error('Ingredients must be an array of ingredients');\n    }\n  }\n\n  return {\n    name: params.name,\n    ingredients: params.ingredients ? params.ingredients.map(validateIngredientInput) : []\n  }\n}\n\nexport const validateIngredientInput = (params): IngredientInput => {\n  if (!params.name || !params.quantity || !params.unit) {\n    throw new Error('Ingredients must have a name, quantity and unit');\n  }\n\n  const unit = params.unit ? params.unit.toUpperCase() : '';\n\n  if (!IngredientUnit[unit]) {\n    throw new Error('Not recognized unit type');\n  }\n\n  return {\n    name: params.name,\n    quantity: params.quantity,\n    unit: IngredientUnit[unit]\n  }\n}\n\n/* eslint-disable */\nexport const validateLoginInput = (params): LoginInput => {\n  if (!params.email) {\n    throw new Error('Email is missing')\n  }\n\n  if (!params.password) {\n    throw new Error('Password is missing')\n  }\n\n  return {\n    email: params.email,\n    password: params.password\n  }\n}\n\n/* eslint-disable */\nexport const validateSignupInput = (params): SignupInput => {\n  validateLoginInput(params);\n\n  return {\n    firstName: params.firstName,\n    lastName: params.lastName,\n    isAdmin: params.isAdmin,\n    email: params.email,\n    password: params.password\n  }\n}\n\n/* eslint-disable */\nexport const validateIngredientUpdate = (params): IngredientUpdateInput => {\n\n  if (!params.name && !params.quantity && !params.unit) {\n    throw new Error('Must attempt to updated at least 1 field');\n  }\n\n  if (params.unit) {\n    params.unit = params.unit.toUpperCase();\n    if (!IngredientUnit[params.unit]) {\n      throw new Error('Not recognized unit type');\n    } else {\n      params.unit = IngredientUnit[params.unit]\n    }\n  }\n\n  return {\n    name: params.name,\n    quantity: params.quantity,\n    unit: params.unit\n  }\n}\n\n"],"file":"validate.js"}