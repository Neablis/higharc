{"version":3,"sources":["../../src/utils/middleware.ts"],"names":["authMiddleware","req","res","next","bearerHeader","headers","authorization","token","split","parsedToken","context","email","admin","userId","err","console","error","logging","info","Date","toTimeString","method","originalUrl","errorHandler","log","status","send","isLoggedIn","missingRoute"],"mappings":";;;;;;;AAGA;;AAEO,MAAMA,cAAc,GAAG,OAC5BC,GAD4B,EAE5BC,GAF4B,EAG5BC,IAH4B,KAIV;AAClB,MAAI;AAAA;;AACF,UAAMC,YAAY,mBAAGH,GAAG,CAACI,OAAP,iDAAG,aAAaC,aAAlC;AAEA,QAAI,CAACF,YAAL,EAAmB,OAAOD,IAAI,EAAX;AACnB,UAAM,GAAGI,KAAH,IAAY,CAAAH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEI,KAAd,CAAoB,GAApB,MAA4B,EAA9C;AACA,QAAI,CAACD,KAAL,EAAYJ,IAAI;AAEhB,UAAMM,WAAkB,GAAG,sBAAWF,KAAX,CAA3B;AAEA,UAAMG,OAAgB,GAAG;AACvBC,MAAAA,KAAK,EAAEF,WAAW,CAACE,KADI;AAEvBC,MAAAA,KAAK,EAAEH,WAAW,CAACG,KAFI;AAGvBC,MAAAA,MAAM,EAAEJ,WAAW,CAACI;AAHG,KAAzB;AAMA;;AACAZ,IAAAA,GAAG,CAACS,OAAJ,GAAcA,OAAd;AAED,GAlBD,CAkBE,OAAOI,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAX,IAAAA,IAAI,CAACW,GAAD,CAAJ;AACD;;AACDX,EAAAA,IAAI;AACL,CA5BM;;;;AA8BA,MAAMc,OAAO,GAAG,CACrBhB,GADqB,EAErBC,GAFqB,EAGrBC,IAHqB,KAIZ;AACTY,EAAAA,OAAO,CAACG,IAAR,CAAc,GAAG,IAAIC,IAAJ,EAAD,CAAaC,YAAb,EAA4B,IAAGnB,GAAG,CAACoB,MAAO,IAAGpB,GAAG,CAACqB,WAAY,EAA7E;AACAnB,EAAAA,IAAI;AACL,CAPM;;;;AASA,MAAMoB,YAAY,GAAG,CAC1BT,GAD0B,EAE1BZ,GAF0B,KAGjB;AACTa,EAAAA,OAAO,CAACS,GAAR,CAAY;AAAEV,IAAAA;AAAF,GAAZ;AACAZ,EAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEV,IAAAA,KAAK,EAAEF;AAAT,GAArB;AACD,CANM;;;;AAQA,MAAMa,UAAU,GAAG,CACxB1B,GADwB,EAExBC,GAFwB,EAGxBC,IAHwB,KAIf;AACT,MAAI,CAACF,GAAG,CAACS,OAAT,EAAkB;AAChBR,IAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX;AACAvB,IAAAA,GAAG,CAACwB,IAAJ,CAAS,oBAAT;AACD,GAHD,MAGO;AACLvB,IAAAA,IAAI;AACL;AACF,CAXM;;;;AAaA,MAAMyB,YAAY,GAAG,CAC1B3B,GAD0B,EAE1BC,GAF0B,KAGjB;AACTA,EAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBV,IAAAA,KAAK,EAAE;AADY,GAArB;AAGD,CAPM","sourcesContent":["import { Response, Request, NextFunction } from \"express\"\n\nimport { Context, Token } from \"../types\"\nimport { parseToken } from \"./auth\"\n\nexport const authMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const bearerHeader = req.headers?.authorization\n\n    if (!bearerHeader) return next()\n    const [, token] = bearerHeader?.split(\" \") || []\n    if (!token) next()\n\n    const parsedToken: Token = parseToken(token)\n\n    const context: Context = {\n      email: parsedToken.email,\n      admin: parsedToken.admin,\n      userId: parsedToken.userId\n    }\n\n    /* eslint-disable */\n    req.context = context\n\n  } catch (err) {\n    console.error(err)\n    next(err)\n  }\n  next()\n}\n\nexport const logging = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void => {\n  console.info(`${(new Date()).toTimeString()} ${req.method} ${req.originalUrl}`)\n  next()\n}\n\nexport const errorHandler = (\n  err: Error,\n  res: Response,\n): void => {\n  console.log({ err })\n  res.status(500).send({ error: err })\n}\n\nexport const isLoggedIn = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void => {\n  if (!req.context) {\n    res.status(401)\n    res.send(\"User not logged in\")\n  } else {\n    next()\n  }\n}\n\nexport const missingRoute = (\n  req: Request,\n  res: Response,\n): void => {\n  res.status(404).send({\n    error: \"Not found\"\n  })\n}\n"],"file":"middleware.js"}