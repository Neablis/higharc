{"version":3,"sources":["../../src/utils/middleware.ts"],"names":["authMiddleware","req","res","next","bearerHeader","headers","authorization","token","split","parsedToken","email","admin","userId","err","console","error","logging","log","Date","toTimeString","method","originalUrl","ErrorInterceptor","_","authChecker","root","args","context","roles","length","undefined","includes"],"mappings":";;;;;;;AAIA;;AAEO,MAAMA,cAAc,GAAG,OAC5BC,GAD4B,EAE5BC,GAF4B,EAG5BC,IAH4B,KAIV;AAClB,MAAI;AAAA;;AACF,UAAMC,YAAY,mBAAGH,GAAG,CAACI,OAAP,iDAAG,aAAaC,aAAlC;AAEA,QAAI,CAACF,YAAL,EAAmB,OAAOD,IAAI,EAAX;AACnB,UAAM,GAAGI,KAAH,IAAY,CAAAH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEI,KAAd,CAAoB,GAApB,MAA4B,EAA9C;AACA,QAAI,CAACD,KAAL,EAAYJ,IAAI;AAEhB,UAAMM,WAAW,GAAG,sBAAWF,KAAX,CAApB;AAEAN,IAAAA,GAAG,CAAC,OAAD,CAAH,GAAeQ,WAAf,aAAeA,WAAf,uBAAeA,WAAW,CAAEC,KAA5B;AACAT,IAAAA,GAAG,CAAC,OAAD,CAAH,GAAeQ,WAAf,aAAeA,WAAf,uBAAeA,WAAW,CAAEE,KAA5B;AACAV,IAAAA,GAAG,CAAC,QAAD,CAAH,GAAgBQ,WAAhB,aAAgBA,WAAhB,uBAAgBA,WAAW,CAAEG,MAA7B;AAED,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAA,IAAAA,GAAG;AACJ;;AACDV,EAAAA,IAAI;AACL,CAvBM;;;;AAyBA,MAAMa,OAAO,GAAG,OACrBf,GADqB,EAErBC,GAFqB,EAGrBC,IAHqB,KAIH;AAClBW,EAAAA,OAAO,CAACG,GAAR,CAAa,GAAG,IAAIC,IAAJ,EAAD,CAAaC,YAAb,EAA4B,IAAGlB,GAAG,CAACmB,MAAO,IAAGnB,GAAG,CAACoB,WAAY,EAA5E;AACAlB,EAAAA,IAAI;AACL,CAPM;;;;AAUA,MAAMmB,gBAAmC,GAAG,OAAOC,CAAP,EAAUpB,IAAV,KAAmB;AACpE,MAAI;AACF,WAAO,MAAMA,IAAI,EAAjB;AACD,GAFD,CAEE,OAAOU,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EADY,CAEZ;;AACA,UAAMA,GAAN;AACD;AACF,CARM,C,CAUP;;;;;AACO,MAAMW,WAAiC,GAAG,CAC/C;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAEjB,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAvB,CAD+C,EAE/CiB,KAF+C,KAG5C;AACH,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,OAAOnB,KAAK,KAAKoB,SAAjB,CADrB,CAGH;;AACA,MAAI,CAACpB,KAAL,EAAY,OAAO,KAAP;;AAEZ,MAAIkB,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoBD,KAAK,CAACG,QAAN,CAAe,OAAf,CAAxB,EAAiD;AAC/C,QAAIpB,KAAJ,EAAW;AACT,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GAZE,CAcH;;;AACA,SAAO,KAAP;AACD,CAnBM","sourcesContent":["import { Response, Request, NextFunction } from 'express';\nimport { MiddlewareFn, AuthChecker } from 'type-graphql';\n\nimport { Context, Token } from '../types';\nimport { parseToken } from './auth';\n\nexport const authMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const bearerHeader = req.headers?.authorization;\n\n    if (!bearerHeader) return next();\n    const [, token] = bearerHeader?.split(' ') || [];\n    if (!token) next();\n\n    const parsedToken = parseToken(token)\n\n    req['email'] = parsedToken?.email;\n    req['admin'] = parsedToken?.admin;\n    req['userId'] = parsedToken?.userId;\n\n  } catch (err) {\n    console.error(err);\n    err\n  }\n  next();\n};\n\nexport const logging = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  console.log(`${(new Date()).toTimeString()} ${req.method} ${req.originalUrl}`)\n  next();\n};\n\n\nexport const ErrorInterceptor: MiddlewareFn<any> = async (_, next) => {\n  try {\n    return await next();\n  } catch (err) {\n    console.error(err);\n    // rethrow the error\n    throw err;\n  }\n};\n\n// create auth checker function\nexport const authChecker: AuthChecker<Context> = (\n  { root, args, context: { email, admin } },\n  roles\n) => {\n  if (roles.length === 0) return email !== undefined;\n\n  // and if no user, restrict access\n  if (!email) return false;\n\n  if (roles.length > 0 && roles.includes('admin')) {\n    if (admin) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // no roles matched, restrict access\n  return false;\n};\n"],"file":"middleware.js"}