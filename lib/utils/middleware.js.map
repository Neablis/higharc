{"version":3,"sources":["../../src/utils/middleware.ts"],"names":["authMiddleware","req","res","next","bearerHeader","headers","authorization","token","split","user","User","findOne","email","err","console","error","ErrorInterceptor","_","authChecker","root","args","context","roles","length","undefined"],"mappings":";;;;;;;;;AAEA;;AAIO,MAAMA,cAAc,GAAG,OAC1BC,GAD0B,EAE1BC,GAF0B,EAG1BC,IAH0B,KAIR;AAClB,MAAI;AAAA;;AACF,UAAMC,YAAY,mBAAGH,GAAG,CAACI,OAAP,iDAAG,aAAaC,aAAlC;AAEA,QAAI,CAACF,YAAL,EAAmB,OAAOD,IAAI,EAAX;AACnB,UAAM,GAAGI,KAAH,IAAY,CAAAH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEI,KAAd,CAAoB,GAApB,MAA4B,EAA9C;AACA,QAAI,CAACD,KAAL,EAAYJ,IAAI;AAEhB,UAAMM,IAAI,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb,CAAnB;AACAX,IAAAA,GAAG,CAAC,MAAD,CAAH,GAAcQ,IAAd;AACD,GATD,CASE,OAAOI,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;;AACDV,EAAAA,IAAI;AACL,CAlBI;;;;AAqBA,MAAMa,gBAAmC,GAAG,OAAOC,CAAP,EAAUd,IAAV,KAAmB;AAClE,MAAI;AACF,WAAO,MAAMA,IAAI,EAAjB;AACD,GAFD,CAEE,OAAOU,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EADY,CAEZ;;AACA,UAAMA,GAAN;AACD;AACF,CARI,C,CAUL;;;;;AACO,MAAMK,WAAiC,GAAG,CAC/C;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAEZ,IAAAA;AAAF;AAAvB,CAD+C,EAE/Ca,KAF+C,KAG5C;AACH;AACA,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,OAAOd,IAAI,KAAKe,SAAhB,CAFrB,CAIH;;AACA,MAAI,CAACf,IAAL,EAAW,OAAO,KAAP,CALR,CAOH;;AACA,SAAO,KAAP;AACD,CAZM","sourcesContent":["import { Response, Request, NextFunction } from 'express';\nimport { MiddlewareFn, AuthChecker } from 'type-graphql';\nimport User from 'entity/User';\n\nimport { Context } from '../types';\n\nexport const authMiddleware = async (\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): Promise<void> => {\n    try {\n      const bearerHeader = req.headers?.authorization;\n\n      if (!bearerHeader) return next();\n      const [, token] = bearerHeader?.split(' ') || [];\n      if (!token) next();\n\n      const user = await User.findOne({ email: 'mitchell@demarcosoftware.com' });\n      req['user'] = user;\n    } catch (err) {\n      console.error(err);\n    }\n    next();\n  };\n\n\nexport const ErrorInterceptor: MiddlewareFn<any> = async (_, next) => {\n    try {\n      return await next();\n    } catch (err) {\n      console.error(err);\n      // rethrow the error\n      throw err;\n    }\n  };\n  \n  // create auth checker function\n  export const authChecker: AuthChecker<Context> = (\n    { root, args, context: { user } },\n    roles\n  ) => {\n    // if `@Authorized()`, check only is user exist\n    if (roles.length === 0) return user !== undefined;\n  \n    // and if no user, restrict access\n    if (!user) return false;\n  \n    // no roles matched, restrict access\n    return false;\n  };\n  "],"file":"middleware.js"}