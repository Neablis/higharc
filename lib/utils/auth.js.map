{"version":3,"sources":["../../src/utils/auth.ts"],"names":["SALT_ROUNDS","ONE_HOUR","Math","floor","Date","now","createToken","user","token","exp","email","admin","isAdmin","userId","id","tokenStr","jwt","sign","process","env","SECRET","parseToken","decoded","verify","hashPassword","password","bcrypt","hash","isPassword","Promise","success","error","compare","err","isMatch"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AAEA,MAAMA,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,IAAiC,KAAK,EAAvD;;AAEO,MAAMC,WAAW,GAAIC,IAAD,IAAwB;AACjD,QAAMC,KAAY,GAAG;AACnBC,IAAAA,GAAG,EAAER,QADc;AAEnBS,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAFO;AAGnBC,IAAAA,KAAK,EAAEJ,IAAI,CAACK,OAAL,IAAgB,KAHJ;AAInBC,IAAAA,MAAM,EAAEN,IAAI,CAACO;AAJM,GAArB;;AAOA,QAAMC,QAAQ,GAAGC,sBAAIC,IAAJ,CAAST,KAAT,EAAgBU,OAAO,CAACC,GAAR,CAAYC,MAA5B,CAAjB;;AAEA,SAAOL,QAAP;AACD,CAXM;;;;AAaA,MAAMM,UAAU,GAAIb,KAAD,IAA0B;AAClD,QAAMc,OAAO,GAAGN,sBAAIO,MAAJ,CAAWf,KAAX,EAAkBU,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAAhB;;AAEA,SAAOE,OAAP;AACD,CAJM;;;;AAMA,MAAME,YAAY,GAAG,MAAOC,QAAP,IAA6C;AACvE,SAAO,MAAMC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBzB,WAAtB,CAAb;AACD,CAFM;;;;AAIA,MAAM4B,UAAU,GAAG,OAAOH,QAAP,EAAyBlB,IAAzB,KAA2D;AACnF,SAAO,IAAIsB,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrC,QAAI,CAACxB,IAAL,EAAW,OAAOwB,KAAK,CAAC,cAAD,CAAZ;AAEXL,IAAAA,MAAM,CAACM,OAAP,CAAeP,QAAf,EAAyBlB,IAAI,CAACkB,QAA9B,EAAwC,CAACQ,GAAD,EAAMC,OAAN,KAAkB;AACxD,UAAID,GAAJ,EAASF,KAAK,CAACE,GAAD,CAAL;AAETH,MAAAA,OAAO,CAACI,OAAD,CAAP;AACD,KAJD;AAKD,GARM,CAAP;AASD,CAVM","sourcesContent":["import User from '../entity/User';\nimport { Token } from 'types';\nimport jwt from 'jsonwebtoken';\nimport * as bcrypt from 'bcryptjs';\n\nconst SALT_ROUNDS = 10;\nconst ONE_HOUR = Math.floor(Date.now() / 1000) + (60 * 60)\n\nexport const createToken = (user: User): string => {\n  const token: Token = {\n    exp: ONE_HOUR,\n    email: user.email,\n    admin: user.isAdmin || false,\n    userId: user.id\n  }\n\n  const tokenStr = jwt.sign(token, process.env.SECRET);\n\n  return tokenStr;\n}\n\nexport const parseToken = (token: string): Token => {\n  const decoded = jwt.verify(token, process.env.SECRET);\n\n  return decoded;\n}\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport const isPassword = async (password: string, user?: User): Promise<boolean> => {\n  return new Promise((success, error) => {\n    if (!user) return error('Missing user');\n\n    bcrypt.compare(password, user.password, (err, isMatch) => {\n      if (err) error(err)\n\n      success(isMatch);\n    });\n  });\n}"],"file":"auth.js"}