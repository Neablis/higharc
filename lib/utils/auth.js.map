{"version":3,"sources":["../../src/utils/auth.ts"],"names":["saltRounds","createToken","user","token","jwt","sign","email","isAdmin","process","env","SECRET","hashPassword","password","bcrypt","hash","isPassword","Promise","success","error","compare","err","isMatch"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AAEA,MAAMA,UAAU,GAAG,EAAnB;;AAEO,MAAMC,WAAW,GAAIC,IAAD,IAAwB;AAC/C,MAAIC,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AACjBC,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KADK;AAEjBC,IAAAA,OAAO,EAAEL,IAAI,CAACK;AAFG,GAAT,EAGTC,OAAO,CAACC,GAAR,CAAYC,MAHH,CAAZ;;AAKA,SAAOP,KAAP;AACH,CAPM;;;;AASA,MAAMQ,YAAY,GAAG,MAAOC,QAAP,IAA6C;AACrE,SAAO,MAAMC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBZ,UAAtB,CAAb;AACH,CAFM;;;;AAIA,MAAMe,UAAU,GAAG,OAAOH,QAAP,EAAyBV,IAAzB,KAA2D;AACjF,SAAO,IAAIc,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnC,QAAI,CAAChB,IAAL,EAAW,OAAOgB,KAAK,CAAC,cAAD,CAAZ;AAEXL,IAAAA,MAAM,CAACM,OAAP,CAAeP,QAAf,EAAyBV,IAAI,CAACU,QAA9B,EAAwC,CAACQ,GAAD,EAAMC,OAAN,KAAkB;AACtD,UAAID,GAAJ,EAASF,KAAK,CAACE,GAAD,CAAL;AAETH,MAAAA,OAAO,CAACI,OAAD,CAAP;AACH,KAJD;AAKH,GARM,CAAP;AASH,CAVM","sourcesContent":["import User from 'entity/User';\nimport { Context } from 'types/context';\nimport jwt from 'jsonwebtoken';\nimport * as bcrypt from 'bcryptjs';\n\nconst saltRounds = 10;\n\nexport const createToken = (user: User): string => {\n    var token = jwt.sign({\n        email: user.email,\n        isAdmin: user.isAdmin\n    }, process.env.SECRET);\n\n    return token;\n}\n\nexport const hashPassword = async (password: string): Promise<string> => {\n    return await bcrypt.hash(password, saltRounds);\n}\n\nexport const isPassword = async (password: string, user?: User): Promise<boolean> => {\n    return new Promise((success, error) => {\n        if (!user) return error('Missing user');\n\n        bcrypt.compare(password, user.password, (err, isMatch) => {\n            if (err) error(err)\n\n            success(isMatch)\n        })\n    });\n}"],"file":"auth.js"}