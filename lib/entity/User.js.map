{"version":3,"sources":["../../src/entity/User.ts"],"names":["User","ID","description","nullable","unique","message","Smoothie","smoothie","user","default","type","BaseEntity","addId","id","hashPassword","password"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAKA;;AAYA;;;;IAIqBA,I,WAFpB,8B,UACA,sB,UAEE,wBAAM,MAAMC,eAAZ,EAAgB;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAhB,C,UACA,6B,2DAGA,wBAAM;AAAEC,EAAAA,QAAQ,EAAE,IAAZ;AAAkBD,EAAAA,WAAW,EAAE;AAA/B,CAAN,C,UACA,qBAAO;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAP,C,2DAGA,wBAAM;AAAEA,EAAAA,QAAQ,EAAE,IAAZ;AAAkBD,EAAAA,WAAW,EAAE;AAA/B,CAAN,C,WACA,qBAAO;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAP,C,6DAGA,qBAAO;AAAEA,EAAAA,QAAQ,EAAE;AAAZ,CAAP,C,WACA,wBAAM;AAAEA,EAAAA,QAAQ,EAAE,KAAZ;AAAmBD,EAAAA,WAAW,EAAE;AAAhC,CAAN,C,WACA,oBAAM;AAAEE,EAAAA,MAAM,EAAE;AAAV,CAAN,C,WACA,8B,6DAGA,qBAAO;AAAED,EAAAA,QAAQ,EAAE;AAAZ,CAAP,C,WACA,+BAAU,CAAV,EAAa;AACZE,EAAAA,OAAO,EAAE;AADG,CAAb,C,6DAKA,wBAAU,MAAMC,iBAAhB,EAA2BC,QAAD,IAAcA,QAAQ,CAACC,IAAjD,C,4DAGA,wBAAM;AAAEN,EAAAA,WAAW,EAAE;AAAf,CAAN,C,WACA,qBAAO;AAAEO,EAAAA,OAAO,EAAE;AAAX,CAAP,C,8DAGA,wBAAM;AAAEP,EAAAA,WAAW,EAAE;AAAf,CAAN,C,WACA,+BAAiB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAjB,C,kGAGA,wBAAM;AAAER,EAAAA,WAAW,EAAE;AAAf,CAAN,C,WACA,+BAAiB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAjB,C,kGAGA,4B,mHAKA,4B,2JA/CH,MAEqBV,IAFrB,SAEkCW,mBAFlC,CAE6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyC5CC,EAAAA,KADC,GACO;AACP,SAAKC,EAAL,GAAU,eAAV;AACC;;AAED,QACKC,YADL,GACoB;AAClB,SAAKC,QAAL,GAAgB,MAAM,yBAAa,KAAKA,QAAlB,CAAtB;AACF;;AAhD2C,C","sourcesContent":["import { Field, ID, ObjectType } from 'type-graphql';\nimport { v4 } from 'uuid';\nimport Smoothie from './Smoothie';\n\nimport {\n  IsEmail,\n  MinLength\n} from 'class-validator';\n\nimport {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryColumn,\n  UpdateDateColumn,\n  BeforeInsert,\n  OneToMany,\n  Index\n} from 'typeorm';\n\nimport { hashPassword } from '../utils';\n\n@ObjectType()\n@Entity()\nexport default class User extends BaseEntity {\n  @Field(() => ID, { description: 'Unique identifier of the User' })\n  @PrimaryColumn()\n  id: string;\n\n  @Field({ nullable: true, description: 'Users first name' })\n  @Column({ nullable: true })\n  firstName?: string;\n\n  @Field({ nullable: true, description: 'Users last name' })\n  @Column({ nullable: true })\n  lastName?: string;\n\n  @Column({ nullable: false })\n  @Field({ nullable: false, description: 'Users email address' })\n  @Index({ unique: true })\n  @IsEmail()\n  email: string;\n\n  @Column({ nullable: false })\n  @MinLength(6, {\n    message: 'Password is too short',\n  })\n  password: string;\n\n  @OneToMany(() => Smoothie, (smoothie) => smoothie.user)\n  smoothies: Smoothie[];\n\n  @Field({ description: 'Users role (only admin exists)' })\n  @Column({ default: false })\n  isAdmin: boolean;\n\n  @Field({ description: 'Date Created' })\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @Field({ description: 'Date Last Updated' })\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt: Date;\n\n  @BeforeInsert()\n\taddId() {\n\t\tthis.id = v4();\n  }\n  \n  @BeforeInsert()\n\tasync hashPassword() {\n    this.password = await hashPassword(this.password);\n\t}\n}"],"file":"User.js"}