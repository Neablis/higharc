{"version":3,"sources":["../src/index.ts"],"names":["dotenv","config","app","appEnv","process","env","APP_ENV","graphqlPath","use","bodyParser","json","authMiddleware","port","PORT","then","console","log","schema","resolvers","UserResolver","SmoothieResolver","IngredientResolver","authChecker","globalMiddlewares","ErrorInterceptor","server","ApolloServer","playground","context","req","email","admin","userId","applyMiddleware","cors","path","listen","catch","error"],"mappings":";;;;AACA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAMA;;AAEA;;AApBA;AAIAA,gBAAOC,MAAP;;AAkBA;AACA,MAAMC,GAAG,GAAG,uBAAZ;AAEA;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAZ,IAAuB,aAAtC;AAEA;;AACA,MAAMC,WAAW,GAAG,GAApB,C,CAEA;;AACAL,GAAG,CAACM,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAR,GAAG,CAACM,GAAJ,CAAQD,WAAR,EAAqBI,qBAArB;AAEA,qBAAOT,GAAP;AAEA;;AACA,MAAMU,IAAI,GAAGR,OAAO,CAACC,GAAR,CAAYQ,IAAZ,IAAoB,IAAjC;AAEA,iCACGC,IADH,CACQ,YAAY;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,QAAMC,MAAM,GAAG,MAAM,8BAAY;AAC/BC,IAAAA,SAAS,EAAE,CACTC,uBADS,EAETC,2BAFS,EAGTC,6BAHS,CADoB;AAM/BC,IAAAA,WAAW,EAAXA,kBAN+B;AAO/BC,IAAAA,iBAAiB,EAAE,CAACC,uBAAD;AAPY,GAAZ,CAArB;AAUA,QAAMC,MAAM,GAAG,IAAIC,iCAAJ,CAAiB;AAC9BT,IAAAA,MAD8B;AAE9BU,IAAAA,UAAU,EAAE,IAFkB;AAG9BC,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAa;AACpB,YAAMD,OAAO,GAAG;AACdE,QAAAA,KAAK,EAAED,GAAG,CAAC,OAAD,CADI;AAEdE,QAAAA,KAAK,EAAEF,GAAG,CAAC,OAAD,CAFI;AAGdG,QAAAA,MAAM,EAAEH,GAAG,CAAC,QAAD;AAHG,OAAhB;AAKA,aAAOD,OAAP;AACD;AAV6B,GAAjB,CAAf;AAYAH,EAAAA,MAAM,CAACQ,eAAP,CAAuB;AAAE/B,IAAAA,GAAF;AAAOgC,IAAAA,IAAI,EAAE,KAAb;AAAoBC,IAAAA,IAAI,EAAE5B;AAA1B,GAAvB;AACAL,EAAAA,GAAG,CAACkC,MAAJ,CAAWxB,IAAX,EAAiB,MAAMG,OAAO,CAACC,GAAR,CAAa,4BAA2BJ,IAAK,EAA7C,CAAvB;AACD,CA5BH,EA6BGyB,KA7BH,CA6BUC,KAAD,IAAWvB,OAAO,CAACC,GAAR,CAAYsB,KAAZ,CA7BpB","sourcesContent":["/** Init env vars MUST BE FIRST */\nimport 'reflect-metadata';\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nimport { ApolloServer } from 'apollo-server-express';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport { buildSchema } from 'type-graphql';\nimport { createConnection } from 'typeorm';\n\nimport {\n  UserResolver,\n  SmoothieResolver,\n  IngredientResolver\n} from './resolvers';\n\nimport router from './routes';\n\nimport { authMiddleware, ErrorInterceptor, authChecker } from './utils';\n\n/** Create app */\nconst app = express();\n\n/** Init Sentry */\nconst appEnv = process.env.APP_ENV || 'development';\n\n/** Add middleware */\nconst graphqlPath = '/';\n\n// TODO make this secure in production\napp.use(bodyParser.json());\napp.use(graphqlPath, authMiddleware);\n\nrouter(app);\n\n/** Run server after connecting to DB */\nconst port = process.env.PORT || 5000;\n\ncreateConnection()\n  .then(async () => {\n    console.log('DB READY');\n\n    const schema = await buildSchema({\n      resolvers: [\n        UserResolver,\n        SmoothieResolver,\n        IngredientResolver\n      ],\n      authChecker,\n      globalMiddlewares: [ErrorInterceptor],\n    });\n\n    const server = new ApolloServer({\n      schema,\n      playground: true,\n      context: ({ req }) => {\n        const context = {\n          email: req['email'],\n          admin: req['admin'],\n          userId: req['userId']\n        };\n        return context;\n      },\n    });\n    server.applyMiddleware({ app, cors: false, path: graphqlPath });\n    app.listen(port, () => console.log(`Server listening on port ${port}`));\n  })\n  .catch((error) => console.log(error));"],"file":"index.js"}