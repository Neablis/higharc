{"version":3,"sources":["../../../src/api/Auth/index.ts"],"names":["router","name","AuthRouter","route","get","req","resp","send","post","next","body","loginParams","err","email","password","connection","existingUser","getRepository","User","createQueryBuilder","addSelect","where","getOne","loggedIn","e","token","signupParams","firstName","lastName","isAdmin","findOne","user","errors","length","save"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA,MAAMA,MAAM,GAAG,sBAAf;AAEA,MAAMC,IAAI,GAAI,MAAd;AACA,MAAMC,UAAU,GAAG,sBAAnB;AAEAA,UAAU,CAACC,KAAX,CAAiB,GAAjB,EACGC,GADH,CACO,OAAOC,GAAP,EAAYC,IAAZ,KAAqBA,IAAI,CAACC,IAAL,CAAUN,IAAV,CAD5B;AAGAC,UAAU,CAACC,KAAX,CAAiB,QAAjB,EACGK,IADH,CACQ,OAAOH,GAAP,EAAYC,IAAZ,EAAkBG,IAAlB,KAA0C;AAC9C,QAAMC,IAAgB,GAAGL,GAAG,CAACK,IAA7B;AAEA,MAAIC,WAAJ;;AAEA,MAAI;AACFA,IAAAA,WAAW,GAAG,+BAAmBN,GAAG,CAACK,IAAvB,CAAd;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,WAAOH,IAAI,CAACG,GAAD,CAAX;AACD;;AAED,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA;AAFI,MAGFJ,IAHJ;AAKA,QAAMK,UAAU,GAAG,6BAAnB;AAEA,QAAMC,YAAY,GAAG,MAAMD,UAAU,CAACE,aAAX,CAAyBC,aAAzB,EACxBC,kBADwB,CACL,MADK,EAExBC,SAFwB,CAEd,eAFc,EAGxBC,KAHwB,CAGlB,mBAHkB,EAGG;AAAER,IAAAA;AAAF,GAHH,EAIxBS,MAJwB,EAA3B;AAMA,MAAI,CAACN,YAAL,EAAmBP,IAAI,CAAC,mBAAD,CAAJ;AAEnB,MAAIc,QAAQ,GAAG,KAAf;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAM,uBAAWT,QAAX,EAAqBE,YAArB,CAAjB;AACD,GAFD,CAEE,OAAOQ,CAAP,EAAU,CAAG;;AAEf,MAAID,QAAQ,IAAIP,YAAhB,EAA8B;AAC5BV,IAAAA,IAAI,CAACC,IAAL,CAAU;AACRkB,MAAAA,KAAK,EAAE,wBAAYT,YAAZ;AADC,KAAV;AAGD,GAJD,MAIO;AACLP,IAAAA,IAAI,CAAC,iBAAD,CAAJ;AACD;AACF,CAvCH;AAyCAP,UAAU,CAACC,KAAX,CAAiB,SAAjB,EACGK,IADH,CACQ,OAAOH,GAAP,EAAYC,IAAZ,EAAkBG,IAAlB,KAA0C;AAC9C,MAAIiB,YAAJ;;AAEA,MAAI;AACFA,IAAAA,YAAY,GAAG,gCAAoBrB,GAAG,CAACK,IAAxB,CAAf;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,WAAOH,IAAI,CAACG,GAAD,CAAX;AACD;;AAED,QAAM;AACJC,IAAAA,KADI;AAEJc,IAAAA,SAFI;AAGJC,IAAAA,QAHI;AAIJd,IAAAA,QAJI;AAKJe,IAAAA;AALI,MAMFH,YANJ;AAQA,QAAMV,YAAY,GAAG,MAAME,cAAKY,OAAL,CAAa;AACtCT,IAAAA,KAAK,EAAE;AACLR,MAAAA;AADK;AAD+B,GAAb,CAA3B;AAMA,QAAMkB,IAAI,GAAG,IAAIb,aAAJ,EAAb;AACAa,EAAAA,IAAI,CAAClB,KAAL,GAAaA,KAAb;AACAkB,EAAAA,IAAI,CAACjB,QAAL,GAAgBA,QAAhB;AACAiB,EAAAA,IAAI,CAACJ,SAAL,GAAiBA,SAAjB;AACAI,EAAAA,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACAG,EAAAA,IAAI,CAACF,OAAL,GAAeA,OAAO,IAAI,KAA1B;AAEA,QAAMG,MAAM,GAAG,MAAM,8BAASD,IAAT,CAArB;;AAEA,MAAIC,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrBxB,IAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD,GAFD,MAEO;AACL,UAAMsB,IAAI,CAACG,IAAL,EAAN;AACA5B,IAAAA,IAAI,CAACC,IAAL,CAAU;AAAEkB,MAAAA,KAAK,EAAE,wBAAYM,IAAZ;AAAT,KAAV;AACD;AACF,CAvCH;eAyCe7B,U","sourcesContent":["import User from '../../entity/User';\nimport { Router } from 'express';\nimport { createToken, isPassword, validateLoginInput, validateSignupInput } from '../../utils';\nimport { validate } from 'class-validator';\nimport { LoginInput, SignupInput } from 'types';\nimport { getConnection } from 'typeorm';\nconst router = Router()\n\nconst name = `Auth`\nconst AuthRouter = Router();\n\nAuthRouter.route('/')\n  .get(async (req, resp) => resp.send(name))\n\nAuthRouter.route('/login')\n  .post(async (req, resp, next): Promise<void> => {\n    const body: LoginInput = req.body;\n\n    let loginParams:LoginInput;\n\n    try {\n      loginParams = validateLoginInput(req.body)\n    } catch (err) {\n      return next(err)\n    }\n\n    const {\n      email,\n      password\n    } = body\n\n    const connection = getConnection();\n\n    const existingUser = await connection.getRepository(User)\n      .createQueryBuilder('user')\n      .addSelect('user.password')\n      .where('user.email=:email', { email })\n      .getOne();\n\n    if (!existingUser) next('User doesnt exist');\n\n    let loggedIn = false;\n    try {\n      loggedIn = await isPassword(password, existingUser)\n    } catch (e) { }\n\n    if (loggedIn && existingUser) {\n      resp.send({\n        token: createToken(existingUser)\n      })\n    } else {\n      next('Incorrect Login')\n    }\n  })\n\nAuthRouter.route('/signup')\n  .post(async (req, resp, next): Promise<void> => {\n    let signupParams: SignupInput;\n\n    try {\n      signupParams = validateSignupInput(req.body)\n    } catch (err) {\n      return next(err);\n    }\n\n    const {\n      email,\n      firstName,\n      lastName,\n      password,\n      isAdmin\n    } = signupParams;\n\n    const existingUser = await User.findOne({\n      where: {\n        email\n      }\n    });\n\n    const user = new User();\n    user.email = email;\n    user.password = password;\n    user.firstName = firstName;\n    user.lastName = lastName;\n    user.isAdmin = isAdmin || false;\n\n    const errors = await validate(user);\n\n    if (errors.length > 0) {\n      next('Error creating new user');\n    } else {\n      await user.save();\n      resp.send({ token: createToken(user) })\n    }\n  })\n\nexport default AuthRouter;"],"file":"index.js"}