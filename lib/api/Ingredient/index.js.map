{"version":3,"sources":["../../../src/api/Ingredient/index.ts"],"names":["IngredientRouter","use","isLoggedIn","route","get","req","resp","next","userId","context","smoothieId","ingredients","Ingredient","find","where","smoothie","length","first","user","id","send","excludeExtraneousValues","params","ingredient","findOne","status","patch","ingredientUpdate","body","err","name","quantity","unit","save"],"mappings":"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","sourcesContent":["import { Router } from \"express\"\nimport { isLoggedIn, validateIngredientUpdate } from \"../../utils\"\nimport Ingredient from \"../../entity/Ingredient\"\nimport { classToPlain } from \"class-transformer\"\nimport { IngredientUpdateInput } from \"types\"\n\nconst IngredientRouter = Router()\n\nIngredientRouter.use(isLoggedIn)\n\nIngredientRouter.route(\"/\")\n  .get(async (req, resp, next) => {\n    const { userId } = req.context;\n\n    const smoothieId = req.smoothieId\n\n    if (!smoothieId) {\n      next(\"Missing smoothie Id\")\n    }\n\n    const ingredients = await Ingredient.find({\n      where: {\n        smoothie: smoothieId\n      }\n    })\n\n    if (ingredients && ingredients.length > 0) {\n      let first = ingredients[0];\n\n      // Requesting a smoothie user doesnt own\n      if (first.smoothie.user.id !== userId) {\n        resp.send([])\n      }\n    }\n\n    resp.send(classToPlain(ingredients, { excludeExtraneousValues: true }))\n  })\n\nIngredientRouter.route(\"/:id\")\n  .get(async (req, resp, next) => {\n    const { smoothieId } = req\n    const { id } = req.params\n\n    if (!smoothieId) {\n      next(\"Missing smoothie Id\")\n    }\n\n    if (!id) {\n      next(\"Missing ingredient Id\")\n    }\n\n    const ingredient = await Ingredient.findOne({\n      where: {\n        smoothie: smoothieId,\n        id\n      }\n    })\n\n    if (!ingredient) {\n      resp.status(404).send(\"Could not find Ingredient\")\n    } else {\n      resp.send(classToPlain(ingredient, { excludeExtraneousValues: true }))\n    }\n  })\n  .patch(async (req, resp, next) => {\n    const { smoothieId } = req\n    const { id } = req.params\n\n    if (!smoothieId) {\n      next(\"Missing smoothie Id\")\n    }\n\n    if (!id) {\n      next(\"Missing ingredient Id\")\n    }\n\n    let ingredientUpdate: IngredientUpdateInput\n    try {\n      ingredientUpdate = validateIngredientUpdate(req.body)\n    } catch (err) {\n      next(err)\n      return\n    }\n\n    const ingredient = await Ingredient.findOne({\n      where: {\n        smoothie: smoothieId,\n        id\n      }\n    })\n\n    if (!ingredient) {\n      resp.status(404).send(\"Could not find ingredient\")\n    } else {\n      ingredient.name = ingredientUpdate.name || ingredient.name\n      ingredient.quantity = ingredientUpdate.quantity || ingredient.quantity\n      ingredient.unit = ingredientUpdate.unit || ingredient.unit\n\n      ingredient.save()\n\n      resp.send(classToPlain(ingredient, { excludeExtraneousValues: true }))\n    }\n  })\n\nexport default IngredientRouter"],"file":"index.js"}