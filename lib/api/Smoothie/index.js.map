{"version":3,"sources":["../../../src/api/Smoothie/index.ts"],"names":["SmoothieRouter","param","req","res","next","id","smoothieId","use","ingredient","isLoggedIn","route","get","resp","userId","context","smoothies","Smoothie","find","where","user","relations","serializedSmoothies","excludeExtraneousValues","send","post","email","User","findOne","smoothieInput","body","err","name","ingredients","console","log","smoothie","errors","length","connection","response","manager","save","ingredientsData","smoothieIngredients","x","quantity","unit","Ingredient","push","results","params","status","patch"],"mappings":"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","sourcesContent":["import { validate } from \"class-validator\"\nimport { classToPlain } from \"class-transformer\"\n\nimport { Router } from \"express\"\nimport { getConnection } from \"typeorm\"\n\nimport Smoothie from \"../../entity/Smoothie\"\nimport { isLoggedIn, validateSmoothieInput } from \"../../utils\"\nimport ingredient from \"../Ingredient\"\nimport User from \"../../entity/User\"\nimport Ingredient from \"../../entity/Ingredient\"\nimport { SmoothieInput } from \"types/smoothie\"\n\nconst SmoothieRouter = Router()\n\n// Exposing the smoothie Id for any down stream routers\nSmoothieRouter.param(\"smoothieId\", (req, res, next, id) => {\n  /* eslint-disable */\n  req.smoothieId = id\n\n  next()\n})\n\nSmoothieRouter.use(\"/:smoothieId/ingredients\", ingredient)\n\nSmoothieRouter.use(isLoggedIn)\n\nSmoothieRouter.route(\"/\")\n  .get(async (req, resp): Promise<void> => {\n    const { userId } = req.context\n    const smoothies = await Smoothie.find({\n      where: {\n        user: userId\n      },\n      relations: [\"ingredients\"]\n    })\n\n    const serializedSmoothies = classToPlain(smoothies, { excludeExtraneousValues: true })\n\n    resp.send(serializedSmoothies)\n  })\n  .post(async (req, resp, next): Promise<void> => {\n    const { email } = req.context\n    const user = await User.findOne({ email: email })\n\n    if (!user) return next(\"User doesnt exist\")\n\n    let smoothieInput: SmoothieInput\n\n    try {\n      smoothieInput = validateSmoothieInput(req.body)\n    } catch (err) {\n      next(err)\n\n      return\n    }\n\n    const {\n      name,\n      ingredients\n    } = smoothieInput\n\n    console.log({smoothieInput})\n\n    const smoothie = new Smoothie()\n\n    smoothie.name = name\n    smoothie.user = user\n\n    const errors = await validate(smoothie)\n\n    if (errors.length > 0) {\n      next(\"Error creating new Smoothie\")\n    } else {\n      const connection = getConnection()\n      const response = await connection.manager.save(Smoothie, smoothie)\n      const ingredientsData = ingredients || []\n      const smoothieIngredients: Ingredient[] = []\n\n      for (let x = 0; x < ingredientsData.length; x++) {\n        const {\n          name,\n          quantity,\n          unit\n        } = ingredientsData[x]\n\n        const ingredient = new Ingredient()\n        ingredient.name = name\n        ingredient.quantity = quantity\n        ingredient.unit = unit\n        ingredient.smoothie = response\n\n        smoothieIngredients.push(await connection.manager.save(Ingredient, ingredient))\n      }\n\n      smoothie.ingredients = smoothieIngredients\n\n      const results = classToPlain(smoothie, { excludeExtraneousValues: true })\n\n      resp.send(results)\n    }\n  })\n\nSmoothieRouter.route(\"/:id\")\n  .get(async (req, resp): Promise<void> => {\n    const { userId } = req.context\n    const { id } = req.params\n\n    const smoothie = await Smoothie.findOne({\n      where: {\n        user: userId,\n        id\n      },\n      relations: [\"ingredients\"]\n    })\n\n    if (!smoothie) {\n      resp.status(404).send(\"Could not find smoothie\")\n      return\n    }\n\n    resp.send(classToPlain(smoothie, { excludeExtraneousValues: true }))\n  })\n  .patch(async (req, resp, next): Promise<void> => {\n    const { userId } = req.context\n    const { id } = req.params\n    const { name } = req.body\n\n    if (!name) {\n      next(\"Must pass new name for smoothie\")\n      return\n    }\n\n    const smoothie = await Smoothie.findOne({\n      where: {\n        user: userId,\n        id\n      },\n      relations: [\"ingredients\"]\n    })\n\n    if (!smoothie) {\n      resp.status(404).send(\"Could not find smoothie\")\n      return\n    }\n\n    smoothie.name = name\n    smoothie.save()\n\n    resp.send(classToPlain(smoothie, { excludeExtraneousValues: true }))\n  })\n\nexport default SmoothieRouter"],"file":"index.js"}