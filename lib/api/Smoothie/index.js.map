{"version":3,"sources":["../../../src/api/Smoothie/index.ts"],"names":["SmoothieRouter","use","ingredient","isLoggedIn","route","get","req","resp","userId","context","smoothies","Smoothie","find","where","user","relations","serializedSmoothies","excludeExtraneousValues","send","post","next","email","User","findOne","smoothieInput","body","err","name","ingredients","smoothie","errors","length","connection","response","manager","save","ingredientsData","smoothieIngredients","x","quantity","unit","Ingredient","push","results","id","params","status","patch"],"mappings":"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","sourcesContent":["import { validate } from \"class-validator\";\nimport { classToPlain, deserializeArray } from 'class-transformer';\n\nimport { Router } from 'express';\nimport { getConnection } from \"typeorm\";\n\nimport Smoothie from '../../entity/Smoothie';\nimport { isLoggedIn, validateSmoothieInput } from '../../utils';\nimport ingredient from \"../Ingredient\"\nimport User from '../../entity/User';\nimport Ingredient from \"../../entity/Ingredient\";\nimport { SmoothieInput } from \"types/smoothie\";\n\nconst SmoothieRouter = Router();\n\nSmoothieRouter.use('/:smoothieId/ingredients', ingredient);\n\nSmoothieRouter.use(isLoggedIn)\n\nSmoothieRouter.route('/')\n  .get(async (req, resp): Promise<void> => {\n    const { userId } = req.context;\n    let smoothies = await Smoothie.find({\n      where: {\n        user: userId\n      },\n      relations: ['ingredients']\n    });\n\n    const serializedSmoothies = classToPlain(smoothies, { excludeExtraneousValues: true })\n\n    resp.send(serializedSmoothies)\n  })\n  .post(async (req, resp, next): Promise<void> => {\n    const { email } = req.context;\n    const user = await User.findOne({ email: email });\n\n    if (!user) return next('User doesnt exist');\n\n    let smoothieInput:SmoothieInput;\n\n    try {\n      smoothieInput = validateSmoothieInput(req.body)\n    } catch (err) {\n      return next(err);\n    }\n\n    const {\n      name,\n      ingredients\n    } = smoothieInput;\n\n    const smoothie = new Smoothie();\n\n    smoothie.name = name;\n    smoothie.user = user;\n\n    const errors = await validate(smoothie);\n\n    if (errors.length > 0) {\n      next('Error creating new Smoothie');\n    } else {\n      const connection = getConnection();\n      const response = await connection.manager.save(Smoothie, smoothie)\n      const ingredientsData = ingredients || []\n      const smoothieIngredients: Ingredient[] = []\n\n      for (let x = 0; x < ingredientsData.length; x++) {\n        const {\n          name,\n          quantity,\n          unit\n        } = ingredientsData[x];\n\n        const ingredient = new Ingredient();\n        ingredient.name = name;\n        ingredient.quantity = quantity;\n        ingredient.unit = unit\n        ingredient.smoothie = response;\n\n        smoothieIngredients.push(await connection.manager.save(Ingredient, ingredient))\n      }\n\n      smoothie.ingredients = smoothieIngredients;\n\n      const results = classToPlain(smoothie, { excludeExtraneousValues: true })\n\n      resp.send(results)\n    }\n  })\n\nSmoothieRouter.route('/:id')\n  .get(async (req, resp, next): Promise<void> => {\n    const { userId } = req.context;\n    const { id } = req.params;\n\n    const smoothie = await Smoothie.findOne({\n      where: {\n        user: userId,\n        id\n      },\n      relations: ['ingredients']\n    });\n\n    if (!smoothie) {\n      resp.status(404).send('Could not find smoothie')\n      return;\n    }\n\n    resp.send(classToPlain(smoothie, { excludeExtraneousValues: true }))\n  })\n  .patch(async (req, resp, next): Promise<void> => {\n    const { userId } = req.context;\n    const { id } = req.params;\n    const { name } = req.body;\n\n    if (!name) {\n      next('Must pass new name for smoothie')\n      return;\n    }\n\n    const smoothie = await Smoothie.findOne({\n      where: {\n        user: userId,\n        id\n      },\n      relations: ['ingredients']\n    });\n\n    if (!smoothie) {\n      resp.status(404).send('Could not find smoothie')\n      return;\n    }\n\n    smoothie.name = name;\n    smoothie.save();\n\n    resp.send(classToPlain(smoothie, { excludeExtraneousValues: true }))\n  })\n\nexport default SmoothieRouter;"],"file":"index.js"}